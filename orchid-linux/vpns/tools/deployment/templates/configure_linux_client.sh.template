#!/bin/bash

# Ignore the HUP signal.  This means if the console goes away, the script
# keeps running.  This is important for doing remote updates so that the 
# script continues after OpenVPN restarts.
trap '' HUP

# TODO Test on EPEL-less CentOS (prereqs)

orchid_hostname="@ORCHID_HOSTNAME@"
client_ip="@CLIENT_IP@"

die_with_error() 
{
    ERR="$1"
    if [[ -z $ERR ]]; then
        ERR="Something went wrong!"
    fi
    

    printf '=%.0s' {1..80} ; echo
    fold -w 80 -s <<< "ERROR: $ERR"
    printf '=%.0s' {1..80} ; echo
    exit 1
}

# This cript will only run as root.
verify_rootness()
{
    if [[ $EUID -ne 0 ]]; then
        die_with_error "This script must be run as root."
    fi
}

# If all apt repos have been disabled (McDonald's USA),
# then re-enable them.
undo_apt_blacklist() {
    if [[ "$distro_id" == "Ubuntu" ]]; then
        if ! grep '^deb ' /etc/apt/sources.list &> /dev/null; then
            apt_blacklist=1
            sed -i 's/^#deb /deb /' /etc/apt/sources.list
            apt-get update
        else
            apt_blacklist=0
        fi
    fi
}

# Orchid Core must already be installed.
verify_orchid()
{
    orchid_binary="/opt/orchid/bin/orchid_server"
    if [[ ! -f $orchid_binary ]]; then
        die_with_error "ERROR: Orchid is not installed at ${orchid_binary}."
    fi
}

# This script is only for Ubuntu 14.04 and 16.04.
verify_os()
{
    # It's either Red Hat or Ubuntu
    if [[ -f /etc/redhat-release ]]; then
        if grep '^CentOS Linux release 7' /etc/redhat-release &> /dev/null; then
            distro_id="CentOS"
            distro_release="7"
        elif grep '^Red Hat Enterprise Linux Server release 7' /etc/redhat-release &> /dev/null; then
            distro_id="Red Hat"
            distro_release="7"
        else
            die_with_error "ERROR: Unsupported Red Hat distribution: $(cat /etc/redhat-release)."
        fi
    else
        if ! which lsb_release &> /dev/null ; then
            die_with_error "ERROR: Could not find lsb_release executable.  Is this Ubuntu?"
        fi

        distro_id=$(lsb_release -is)
        distro_release=$(lsb_release -rs) 

        if [[ $distro_id != "Ubuntu" ]]; then
            die_with_error "ERROR: Unknown Linux distribution: $(lsb_release -is).  Only Ubuntu is supported."
        fi

        if [[ $distro_release != "14.04" ]] && [[ $distro_release != "16.04" ]]; then
            die_with_error "ERROR: Unsupported Ubuntu version: ${distro_release}.  Only 14.04 and 16.04 are supported."
        fi
    fi
}

# Require client packages
install_prereqs()
{
    trap die_with_error ERR
    
    if [[ $distro_id == "Ubuntu" ]]; then
        apt-get -yy -q install openvpn jq ssh
        if [[ $distro_release == "14.04" ]]; then
            if ! dpkg -l | grep libnss3-tools &> /dev/null ; then
                die_with_error "ERROR: libnss3-tools is not installed.  On Ubuntu 14.04, you must install this manually"
            fi
        else
            apt-get -yy -q install libnss3-tools
        fi
    else
        yum -y install epel-release
        yum -y update
        yum -y install openvpn jq ssh libnss3-tools
    fi
}

# Save the OpenVPN script generated by the cloud server.
write_openvpn_config()
{
    trap die_with_error ERR

    cat > /etc/openvpn/${orchid_hostname}.conf << EOF
@OPENVPN_CONFIG_FILE@
EOF

    if [[ $distro_id != "Ubuntu" ]]; then
        sed -i "s/^group nogroup/group nobody/" /etc/openvpn/${orchid_hostname}.conf
    fi
}

# Save the TLS certificate/key pair generated by the cloud server.
write_tls_files()
{
    cat > /etc/opt/fusion_cloud_service.key << EOF
@FUSION_CLOUD_KEY@
EOF

    cat > /etc/opt/fusion_cloud_service.crt << EOF
@FUSION_CLOUD_CERT@
EOF

    if [[ $distro_id == "Ubuntu" ]]; then
        cert_dir="/usr/local/share/ca-certificates"
    else
        cert_dir="/etc/pki/ca-trust/source/anchors"
    fi

    cat > ${cert_dir}/fusion-cloud-ca.crt << EOF
@FUSION_CLOUD_CA@
EOF

    trap ERR
}

# This server should know its VPN hostname.
update_hostname()
{
    trap die_with_error ERR

    sed -i "/${client_ip}[[:space:]]*${orchid_hostname}.*/d" /etc/hosts
    echo "${client_ip} ${orchid_hostname}" >> /etc/hosts
    
    trap ERR
}

# Update Orchid to user HTTPS with the generated certificates
update_orchid_props_file()
{
    props="/etc/opt/orchid_server.properties"

    trap die_with_error ERR

    sed -i '/webserver.protocol = .*/d' ${props}
    sed -i '/webserver.port = .*/d' ${props}
    sed -i '/rtsp.protocol = .*/d' ${props}
    sed -i '/tls.key = .*/d' ${props}
    sed -i '/tls.certificate = .*/d' ${props}
    echo "" >> ${props}
    echo "webserver.protocol = https" >> ${props}
    echo "webserver.port = 443" >> ${props}
    echo "rtsp.protocol = rtsps" >> ${props}
    echo "tls.key = /etc/opt/fusion_cloud_service.key" >> ${props}
    echo "tls.certificate = /etc/opt/fusion_cloud_service.crt" >> ${props}

    trap ERR
}

# Run OpenVPN, and configure a cronjob to restart it every 10 minutes.
start_openvpn()
{
    trap die_with_error ERR
    failsafe_script="/usr/local/bin/vpn_failsafe.sh"
    
    if [[ $distro_release == "14.04" ]]; then
        service openvpn restart

        cat > ${failsafe_script} << EOF
#!/bin/bash

if ! ps -auxw | grep -v grep | grep /usr/sbin/openvpn; then
    sleep 10s
    if ! ps -auxw | grep -v grep | grep /usr/sbin/openvpn; then
        nohup /usr/sbin/openvpn /etc/openvpn/${orchid_hostname}.conf &> /var/log/openvpn.log &
    fi
fi
EOF
        chmod 755 ${failsafe_script}

        crontab -l \
            | sed '/.*openvpn.*/d' \
            | printf "*/10 * * * * ${failsafe_script}\n" \
            | crontab -
    else 
        # TODO This blows away existing crontab
        systemctl enable openvpn@${orchid_hostname}
        systemctl start openvpn@${orchid_hostname}
        crontab -l \
            | sed "/.*systemctl start ${orchid_hostname}@openvpn.*/d" \
            | printf "*/10 * * * * /bin/systemctl start ${orchid_hostname}@openvpn\n" \
            | crontab -
    fi

    trap ERR
}

# Restart Orchid to apply properties file changes.
restart_orchid()
{
    trap die_with_error ERR

    if [[ $distro_release == "14.04" ]]; then
        service orchid restart
    else 
        systemctl restart orchid
    fi
    
    trap ERR
}

# Open the firewall on CentOS/RHEL
open_firewall()
{
    trap die_with_error ERR

    if [[ "$distro_id" != "Ubuntu" ]]; then
	firewall-cmd --add-port=443/tcp --permanent		
	firewall-cmd --reload
    fi
    
    trap ERR
}

# For a list of users ($USER, orchid, orchid_viewer), configure Chrome 34's
# and Firefox's certificate database to add our cloud CA, and change Chrome's
# homepage to https://localhost.
configure_browsers()
{
    # If there's no X, we don't need to be here.
    if [[ ! -f /usr/bin/X ]]; then
        return
    fi

    if [[ $distro_id == "Ubuntu" ]]; then
        update-ca-certificates    
    else
        update-ca-trust
    fi

    # Users whose browser CA lists we'll muck with.  Assuming they exist,
    # these are orchid, orchid_viewer, and $USER.
    declare -A home_dirs
    home_dirs[${HOME}]=
    for home_dir in /home/orchid /home/orchid_viewer; do
        if [[ -d $home_dir ]]; then
            home_dirs[$home_dir]=
        fi
    done
    
    for home_dir in "${!home_dirs[@]}"; do
        # Add magic certs to Chrome.  This is a hack.  This probably only
        # works from Chrome 34.  We can do better.  We must do better.

        trap die_with_error ERR

        pushd .
        mkdir -p ${home_dir}/.pki/nssdb       
        cd ${home_dir}/.pki/nssdb

        base64 -d << EOF | tar xvz
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
3/UVsD/VwIIFCxYsWLD4/+H/AK+nnQoAeAAA
EOF
        popd
        
        # Make nssdb owned by the user.
        nssdb_owner=$( stat -c '%U' ${home_dir} ) 
        chown -R ${nssdb_owner}.${nssdb_owner} ${home_dir}/.pki

        trap ERR
    
        if [[ $distro_id == "Ubuntu" ]]; then
            cert_path="/usr/local/share/ca-certificates/fusion-cloud-ca.crt"
        else
            cert_path="/etc/pki/ca-trust/source/anchors/fusion-cloud-ca.crt"
        fi

        # Add Cloud CA certificate to Firefox
        certutil -A \
            -d ${home_dir}/.mozilla/firefox/*.default/ \
            -n "IPConfigure Cloud CA" \
            -t "CT,C,C" \
            -i $cert_path

        # Update Chrome homepage
        trap die_with_error ERR
        if [[ -f ${home_dir}/.config/google-chrome/Default/Preferences ]]; then
            # Set Chrome home page and popup blocker.
            killall -9 chrome || true
            tmpfile=`mktemp`
            chrome_prefs="${home_dir}/.config/google-chrome/Default/Preferences"
            cp "$chrome_prefs" "$tmpfile"
            cat "$tmpfile" | jq ".profile.default_content_settings.popups = 1 | .session.startup_urls = [ \"https://localhost/\" ]" > "$chrome_prefs"
            rm -f "$tmpfile"
        fi

        # Update Firefox homepage
        if [[ -f /etc/firefox-esr/firefox-esr.js ]]; then
            sed -i '/.*("browser.startup.homepage", ".*");/d' /etc/firefox-esr/firefox-esr.js
            echo 'lockPref("browser.startup.homepage", "https://localhost");' >> /etc/firefox-esr/firefox-esr.js
        fi
        trap ERR
    done
}

# Give us root access to this server because cloud.
configure_ssh_access()
{
    # Add a fusion_cloud_service account with SSH access and password-less sudo.
    userdel fusion_cloud_service &> /dev/null

    trap die_with_error ERR

    if [[ $distro_id == "Ubuntu" ]]; then
        sudo_group="sudo"
    else
        sudo_group="wheel"
    fi

    useradd -m fusion_cloud_service -s /bin/bash -G $sudo_group

    # Assign crazy random password
    chpasswd <<< "fusion_cloud_service:$( date +%s | sha256sum | base64 | head -c 32 )"

    # Go nuts and edit the sudoers file without a lock.
    sed -i '/^fusion_cloud_service.*/d' /etc/sudoers
    echo "fusion_cloud_service  ALL=NOPASSWD: ALL" >> /etc/sudoers

    # Add the Cloud server's public key and set the correct permissions.
    mkdir -p /home/fusion_cloud_service/.ssh 
    cat > /home/fusion_cloud_service/.ssh/authorized_keys << EOF
@FUSION_SERVER_PUBLIC_KEY@
EOF

    chown -R fusion_cloud_service.fusion_cloud_service /home/fusion_cloud_service/.ssh
    chmod 600 /home/fusion_cloud_service/.ssh/authorized_keys

    echo "[User]
SystemAccount=true" > /var/lib/AccountsService/users/fusion_cloud_service

    trap ERR
}

# Redo what we undid in blacklisting the apt repos.
redo_apt_blacklist() {
    if [[ $distro_id == "Ubuntu" ]]; then
        if [[ $apt_blacklist -eq 0 ]]; then
            sed -i 's/^deb /#deb /' /etc/apt/sources.list
            apt-get update
        fi
    fi
}

verify() 
{
    # Write some identifying info so we can tell, many eons from now, which
    # script was run on this client.
    cat << EOF > /opt/orchid/.fusion_hosted_deployment
template_md5=@TEMPLATE_MD5@
git_hash=@GIT_HASH@
gen_date=@GEN_DATE@
EOF

    sleep 5s
    if ! ip addr show dev tun0 | grep ${client_ip}/ &> /dev/null; then
        die_with_error "ERROR: VPN tunnel is not up.  This server is not correctly configured.  This script is designed to idempotent, so fix something and keep running it until it succeeds."
    fi

    printf "\n\n"
    printf '*%.0s' {1..80} ; echo
    fold -w 80 -s <<< "SUCCESS! Verify that https://localhost is accessible and add this Orchid Core instance to Orchid Fusion!"
    printf '*%.0s' {1..80} ; echo
    printf "\n\n"
}

verify_rootness
verify_os
undo_apt_blacklist
verify_orchid
install_prereqs
write_openvpn_config
write_tls_files
update_hostname
update_orchid_props_file
start_openvpn
restart_orchid
open_firewall
configure_browsers
configure_ssh_access
undo_apt_blacklist
verify
