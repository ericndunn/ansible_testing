#!/bin/bash

# Ignore the HUP signal.  This means if the console goes away, the script
# keeps running.  This is important for doing remote updates so that the 
# script continues after OpenVPN restarts.
trap '' HUP

# TODO Test on EPEL-less CentOS (prereqs)

orchid_hostname="@ORCHID_HOSTNAME@"
client_ip="@CLIENT_IP@"

die_with_error() 
{
    ERR="$1"
    if [[ -z $ERR ]]; then
        ERR="Something went wrong!"
    fi
    

    printf '=%.0s' {1..80} ; echo
    fold -w 80 -s <<< "ERROR: $ERR"
    printf '=%.0s' {1..80} ; echo
    exit 1
}

# This cript will only run as root.
verify_rootness()
{
    if [[ $EUID -ne 0 ]]; then
        die_with_error "This script must be run as root."
    fi
}

# Orchid Core must already be installed.
verify_orchid()
{
    orchid_binary="/opt/orchid/bin/orchid_server"
    if [[ ! -f $orchid_binary ]]; then
        die_with_error "ERROR: Orchid is not installed at ${orchid_binary}."
    fi
}

# This script is only for Ubuntu 14.04 and 16.04.
verify_os()
{
    # It's either Red Hat or Ubuntu
    if [[ -f /etc/redhat-release ]]; then
        if grep '^CentOS Linux release 7' /etc/redhat-release &> /dev/null; then
            distro_id="CentOS"
            distro_release="7"
        elif grep '^Red Hat Enterprise Linux Server release 7' /etc/redhat-release &> /dev/null; then
            distro_id="Red Hat"
            distro_release="7"
        else
            die_with_error "ERROR: Unsupported Red Hat distribution: $(cat /etc/redhat-release)."
        fi
    else
        if ! which lsb_release &> /dev/null ; then
            die_with_error "ERROR: Could not find lsb_release executable.  Is this Ubuntu?"
        fi

        distro_id=$(lsb_release -is)
        distro_release=$(lsb_release -rs) 

        if [[ $distro_id != "Ubuntu" ]]; then
            die_with_error "ERROR: Unknown Linux distribution: $(lsb_release -is).  Only Ubuntu is supported."
        fi

        if [[ $distro_release != "14.04" ]] && [[ $distro_release != "16.04" ]]; then
            die_with_error "ERROR: Unsupported Ubuntu version: ${distro_release}.  Only 14.04 and 16.04 are supported."
        fi
    fi
}

# Require client packages
verify_prereqs()
{
    trap die_with_error ERR
    
    if [[ $distro_id == "Ubuntu" ]]; then
        if ! dpkg -l | grep openvpn &> /dev/null ; then
            die_with_error "ERROR: openvpn is not installed."
        fi
    else
        if [[ -z $( rpm -qa openvpn ) ]]; then
            die_with_error "ERROR: openvpn is not installed."
        fi
    fi
}

# Save the OpenVPN script generated by the cloud server.
write_openvpn_config()
{
    trap die_with_error ERR

    cat > /etc/openvpn/${orchid_hostname}.conf << EOF
@OPENVPN_CONFIG_FILE@
EOF

    if [[ $distro_id != "Ubuntu" ]]; then
        sed -i "s/^group nogroup/group nobody/" /etc/openvpn/${orchid_hostname}.conf
    fi
}

# Save the TLS certificate/key pair generated by the cloud server.
write_tls_files()
{
    cat > /etc/opt/fusion_cloud_service.key << EOF
@FUSION_CLOUD_KEY@
EOF

    cat > /etc/opt/fusion_cloud_service.crt << EOF
@FUSION_CLOUD_CERT@
EOF

    if [[ $distro_id == "Ubuntu" ]]; then
        cert_dir="/usr/local/share/ca-certificates"
    else
        cert_dir="/etc/pki/ca-trust/source/anchors"
    fi

    cat > ${cert_dir}/fusion-cloud-ca.crt << EOF
@FUSION_CLOUD_CA@
EOF

    trap ERR
}

# Update Orchid to user HTTPS with the generated certificates
update_orchid_props_file()
{
    props="/etc/opt/orchid_server.properties"

    trap die_with_error ERR

    sed -i '/webserver.protocol = .*/d' ${props}
    sed -i '/webserver.port = .*/d' ${props}
    sed -i '/rtsp.protocol = .*/d' ${props}
    sed -i '/tls.key = .*/d' ${props}
    sed -i '/tls.certificate = .*/d' ${props}
    echo "" >> ${props}
    echo "webserver.protocol = https" >> ${props}
    echo "webserver.port = 443" >> ${props}
    echo "rtsp.protocol = rtsps" >> ${props}
    echo "tls.key = /etc/opt/fusion_cloud_service.key" >> ${props}
    echo "tls.certificate = /etc/opt/fusion_cloud_service.crt" >> ${props}

    trap ERR
}

# Run OpenVPN, and configure a cronjob to restart it every 10 minutes.
start_openvpn()
{
    trap die_with_error ERR
    
    if [[ $distro_release == "14.04" ]]; then
        service openvpn restart
    else 
        systemctl enable openvpn@${orchid_hostname}
        systemctl start openvpn@${orchid_hostname}
    fi

    trap ERR
}

# Restart Orchid to apply properties file changes.
restart_orchid()
{
    trap die_with_error ERR

    if [[ $distro_release == "14.04" ]]; then
        service orchid restart
    else 
        systemctl restart orchid
    fi
    
    trap ERR
}

# Open the firewall on CentOS/RHEL
open_firewall()
{
    if [[ "$distro_id" != "Ubuntu" ]]; then
        firewall-cmd --add-port=443/tcp --permanent || true
        firewall-cmd --reload || true
    fi
}

verify() 
{
    # Write some identifying info so we can tell, many eons from now, which
    # script was run on this client.
    cat << EOF > /opt/orchid/.fusion_hosted_deployment
template_md5=@TEMPLATE_MD5@
git_hash=@GIT_HASH@
gen_date=@GEN_DATE@
EOF

    sleep 5s
    if ! ip addr show dev tun0 | grep ${client_ip}/ &> /dev/null; then
        die_with_error "ERROR: VPN tunnel is not up.  This server is not correctly configured.  This script is designed to idempotent, so fix something and keep running it until it succeeds."
    fi

    printf "\n\n"
    printf '*%.0s' {1..80} ; echo
    fold -w 80 -s <<< "SUCCESS! Verify that https://localhost is accessible and add this Orchid Core instance to Orchid Fusion!"
    printf '*%.0s' {1..80} ; echo
    printf "\n\n"
}

verify_rootness
verify_os
verify_orchid
verify_prereqs
write_openvpn_config
write_tls_files
update_orchid_props_file
start_openvpn
restart_orchid
open_firewall
verify
