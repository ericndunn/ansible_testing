###########################################
# DETERMINE DOWNLOAD SITE
###########################################
# If we're inside IPConfigure's staging environment, we want to download installers
# from 192.168.100.205.  Otherwise, use download.ipconfigure.com.
- name: Set default Orchid Core VMS download site
  set_fact:
    orchid_download_url: "https://download.ipconfigure.com/orchid/"

- name: Look for local Orchid Core VMS download mirror
  uri:
    url: "http://192.168.100.205/orchid/LATEST"
    return_content: yes
  register: orchid_mirror_response
  ignore_errors: true

- name: Set Orchid Core VMS local mirror if found 
  set_fact:
    orchid_download_url: "http://192.168.100.205/orchid/"
  when: orchid_mirror_response.status == 200
   
###########################################
# GET THE VERSION OF THE NEWEST INSTALLERS
###########################################
- name: Get version of latest Orchid Core VMS release
  uri: 
    url: "{{ orchid_download_url }}/LATEST"
    return_content: yes
  register: latest_orchid_response
  failed_when: latest_orchid_response.status != 200

- name: Parse HTTP version response
  set_fact:
    latest_orchid_version: "{{ latest_orchid_response.content | trim }}"

###########################################
# BUILD INSTALLER FILENAMES
###########################################
- name: Build RPM/x86-64 download file name
  set_fact:
    orchid_installer: "ipc-orchid-x86_64_{{ latest_orchid_version }}.rpm"
  when: ansible_os_family == "RedHat" and ansible_architecture == "x86_64"

- name: Build Debian/armv6l download file name
  set_fact:
    orchid_installer: "ipc-orchid-armv6l_{{ latest_orchid_version }}-jessie.deb"
  when: ansible_lsb.id is defined and ansible_lsb.id == "Raspbian"

- name: Build Debian/armv6l download file name
  set_fact:
    orchid_installer: "ipc-orchid-armv7l_{{ latest_orchid_version }}-jessie.deb"
  when: ansible_lsb.id is defined and ansible_lsb.id != "Raspbian" and ansible_architecture == "armv7"

- name: Build Ubuntu 14.04 download file name
  set_fact:
    orchid_installer: "ipc-orchid-x86_64_{{ latest_orchid_version }}.deb"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "14.04"

- name: Build Ubuntu 16.04 download file name
  set_fact:
    orchid_installer: "ipc-orchid-x86_64_{{ latest_orchid_version }}-jessie.deb"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "16.04"

- name: Build Ubuntu 18.04 download file name
  set_fact:
    orchid_installer: "ipc-orchid-x86_64_{{ latest_orchid_version }}-bionic.deb"
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"

- name: Build download checksum file name
  set_fact:
    orchid_installer_checksum: "{{ orchid_installer }}.md5"

#################################################
# GET CHECKSUM OF INSTALLER WE WANT TO DOWNLOAD
#################################################
- name: Get checksum of Orchid installer
  uri: 
    url: "{{ orchid_download_url }}/{{ orchid_installer_checksum }}"
    return_content: yes
  register: orchid_checksum_response
  failed_when: orchid_checksum_response.status != 200

- name: Parse checksum response
  set_fact:
    orchid_checksum: "md5:{{ orchid_checksum_response.content.split(' ')[0] | trim }}"

#################################################
# DOWNLOAD INSTALLER (WITH CHECKSUM)
#################################################
- name: Download Orchid Core VMS
  get_url:
    url: "{{ orchid_download_url }}/{{ orchid_installer }}"
    dest: "/tmp/{{ orchid_installer }}"
    checksum: "{{ orchid_checksum }}"

#################################################
# INSTALL ORCHID
#################################################
- name: Set Orchid Core VMS installer options (Debian)
  import_tasks: debian-preseeds.yml
  become: true
  when: ansible_os_family == "Debian"

- name: Install Orchid Core VMS (Debian)
  apt:
    deb: "/tmp/{{ orchid_installer }}"
  become: yes
  when: ansible_os_family == "Debian"

# RPM install is way more complicated since we have to edit
# the properties file, start the service, set the firewall,
# etc. 
- block:
    - name: Check if Orchid Core VMS RPM already installed      
      command: rpm -qa ipc-orchid
      register: rpm_check
      changed_when: false
      args:
        warn: no

    # This block executes if the RPM isn't installed.
    - block:
        - name: Install Orchid Core VMS (RPM)
          command: "rpm -Uvh --force --nopre /tmp/{{ orchid_installer }}"
          args:
            warn: no

        - name: Set password in properties file
          lineinfile:
            path: /etc/opt/orchid_server.properties
            regexp: '^orchid.admin.password ='
            line: "orchid.admin.password = {{ orchid_installer_options['password'] }}"

        - name: Set /orchives directory in properties file
          lineinfile:
            path: /etc/opt/orchid_server.properties
            regexp: '^archives.dir ='
            line: "archives.dir = {{ orchid_installer_options['orchives_dir'] }}"

        - name: Set web server in properties file
          lineinfile:
            path: /etc/opt/orchid_server.properties
            regexp: '^webserver.port ='
            line: "webserver.port = {{ orchid_installer_options['webserver_port'] }}"

        - name: Open HTTP port on firewall
          firewalld: 
            port: "{{ orchid_installer_options['webserver_port'] }}/tcp"
            permanent: yes
            immediate: yes
            state: enabled

        - name: Open RTSP port on firewall
          firewalld: 
            port: 554/tcp
            permanent: yes
            immediate: yes
            state: enabled

        - name: Open ONVIF Auto Discovery port on firewall
          firewalld: 
            port: 5565/tcp
            permanent: yes
            immediate: yes
            state: enabled

        - name: Enable and start ONVIF Autodiscovery service
          systemd:
            name: orchid_onvif_autodiscovery
            enabled: yes
            state: started 

        - name: Enable and start Orchid Core VMS
          systemd:
            name: orchid
            enabled: yes
            state: started 

      when: rpm_check.stdout.find('ipc-orchid') == -1

  become: yes
  when: ansible_os_family == "RedHat"


- name: Set orchives disk usage percentage
  lineinfile:
    path: /etc/opt/orchid_server.properties
    regexp: '^archivecleaner.usedspace.percentage ='
    line: "archivecleaner.usedspace.percentage = {{ orchid_installer_options['disk_percentage'] }}"
  become: true

- name: Restart Orchid Core VMS
  include_tasks: manage-service.yml
  vars:
    orchid_service_state: restarted
